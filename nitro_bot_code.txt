
import discord
from discord.ext import commands
from colorama import Fore
from time import localtime, strftime
import requests
import random
import string
import os
import asyncio

intents = discord.Intents.default()
intents.message_content = True

client = commands.Bot(command_prefix='!', intents=intents)


class SapphireGen:
    def __init__(self, code_type: str, prox=None, codes=None):
        self.type = code_type
        self.codes = codes
        self.proxies = prox
        self.session = requests.Session()
        self.prox_api = (
            "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt"
        )

    def __proxies__(self):
        req = self.session.get(self.prox_api).text
        if req is not None:
            open("./data/proxies.txt", "w").write(req)

    async def generate(self, scrape=None, channel=None):
        if scrape == "True":
            self.__proxies__()
        else:
            pass

        for _ in range(int(self.codes)):
            try:
                if self.proxies == "True":
                    prox = {
                        "http": random.choice(
                            open("./data/proxies.txt", "r").read().splitlines()
                        )
                    }
                else:
                    prox = None

                if self.type == "boost":
                    code = "".join(
                        [
                            random.choice(string.ascii_letters + string.digits)
                            for i in range(24)
                        ]
                    )
                else:
                    code = "".join(
                        [
                            random.choice(string.ascii_letters + string.digits)
                            for i in range(16)
                        ]
                    )
                req = self.session.get(
                    f"https://discordapp.com/api/entitlements/gift-codes/{code}",
                    proxies=prox,
                    timeout=10,
                ).status_code
                if req == 200:
                    message = f"**ðŸŸ¢ Valid code :** discord.gift/{code}"
                    await channel.send(message)
                if req == 404:
                    message = f"**ðŸŸ¡ Invalid code :** discord.gift/{code}"
                    await channel.send(message)
                if req == 429:
                    message = f"**ðŸ”´ Rate limited :** discord.gift/{code}"
                    await channel.send(message)

            except Exception as e:
                print(f"{Fore.RED}[{strftime('%H:%M', localtime())}] {e}")

        print(
            f"{Fore.LIGHTMAGENTA_EX}[{strftime('%H:%M', localtime())}] **âœ… Successfully checked {self.codes} codes.**"
        )
        await channel.send(f"Successfully checked {self.codes} codes.")
        await asyncio.sleep(1.5)



@client.event
async def on_ready():
    await client.change_presence(activity=discord.Streaming(name="!nitro ðŸ”®", url="https://www.twitch.tv/discord"))
    print('Bot is ready')


@client.command()
async def nitro(ctx):
    await ctx.send(f" **âœ¨ Code Type (boost, classic) : ðŸ”®** ")
    code_type_msg = await client.wait_for('message', check=lambda message: message.author == ctx.author)
    code_type = code_type_msg.content

    await ctx.send(f"**âœ¨ Proxies (True, False) : ðŸ”®Ø§Ø®ØªØ± falseØ§** ")
    prox_msg = await client.wait_for('message', check=lambda message: message.author == ctx.author)
    prox = prox_msg.content

    scrape_proxy = False
   # if prox == "True":
       # await ctx.send(f" **âœ¨ Scrape proxies (True, False) : ðŸ”®** ")
       # scrape_proxy_msg = await client.wait_for('message', check=lambda message: message.author == ctx.author)
       # scrape_proxy = scrape_proxy_msg.content

    await ctx.send(f" **âœ¨ Number of codes : ðŸ”®** ")
    codes_msg = await client.wait_for('message', check=lambda message: message.author == ctx.author)
    codes = int(codes_msg.content)

    gen = SapphireGen(code_type, prox, codes)
    channel = ctx.channel
    await gen.generate(scrape=scrape_proxy, channel=channel)




if __name__ == "__main__":
    token = ""
    client.run(token)